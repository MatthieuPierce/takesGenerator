{"version":3,"sources":["components/Sharebox.js","redux/constants.js","App.js","redux/actions.js","redux/reducers.js","index.js"],"names":["Sharebox","props","tweetContent","this","textForShare","author","className","href","target","id","rel","React","Component","connect","state","text","NEXT","App","handleNext","nextQuote","bind","onClick","type","startingState","usedPhrases","freshPhrases","takes","rootReducer","action","length","lastPhrase","randomFreshIndex","Math","floor","random","slice","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q2FAIMA,G,wDACJ,WAAYC,GAAQ,uCACZA,G,qDAIN,IAAIC,EAAY,gDAA4CC,KAAKF,MAAMG,aAAvD,aAAwED,KAAKF,MAAMI,QACnG,OACE,qBAAKC,UAAU,WAAf,SAA0B,mBAAGC,KAAML,EAAcM,OAAO,SAASC,GAAG,cAAcC,IAAI,aAA5D,8B,GARTC,IAAMC,YAsBdC,eAPS,SAACC,GACvB,MAAO,CACLV,aAAcU,EAAMC,KACpBV,OAAQS,EAAMT,UAIHQ,CAAyBb,GCxB3BgB,EAAO,OCOdC,G,wDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAIRiB,WAAa,WACX,EAAKjB,MAAMkB,aAJX,EAAKD,WAAa,EAAKA,WAAWE,KAAhB,gBAFD,E,gEAUjBjB,KAAKe,e,+BAIL,OACE,qBAAKZ,UAAU,MAAf,SACE,sBAAKG,GAAG,YAAYH,UAAU,YAA9B,UACE,iCACE,wDAEF,sBAAKG,GAAG,aAAR,UACE,qBAAKA,GAAG,OAAR,SAAgBN,KAAKF,MAAMc,OAC3B,sBAAKN,GAAG,SAAR,cAAoBN,KAAKF,MAAMI,aAEjC,sBAAKC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,wBAAQG,GAAG,YAAYY,QAASlB,KAAKe,WAArC,mC,GA3BMP,IAAMC,YAgFTC,eAzBS,SAACC,GACvB,MAAO,CACLC,KAAMD,EAAMC,KACZV,OAAQS,EAAMT,UAsBsB,CAAEc,UCtFjB,WACvB,MAAO,CACLG,KAAMN,KDoFKH,CAAwCI,G,cEnEjDM,EAAgB,CACpBR,KAAM,GACNV,OAAQ,GACRmB,YAAa,GACbC,a,MAvBoBC,OA+DPC,MAnCf,WAAqD,IAAhCb,EAA+B,uDAAvBS,EAAeK,EAAQ,uCAClD,OAAQA,EAAON,MACb,KAAMN,EAEJ,GAAIF,EAAMW,aAAaI,OAAQ,CAC7B,IAAIC,EAAa,CACff,KAAMD,EAAMC,KACZV,OAAQS,EAAMT,QAEZ0B,EAAmBC,KAAKC,MAAMD,KAAKE,SAAWpB,EAAMW,aAAaI,QALxC,EAMNf,EAAMW,aAAaM,GAApChB,EANuB,EAMvBA,KAAMV,EANiB,EAMjBA,OACZ,MAAQ,CACNU,KAAMA,EACNV,OAAQA,EACRmB,YAAY,GAAD,mBAAMV,EAAMU,aAAZ,CAAyBM,IACpCL,aAAa,GAAD,mBAAMX,EAAMW,aAAaU,MAAM,EAAGJ,IAAlC,YACKjB,EAAMW,aAAaU,MAAMJ,EAAmB,MAGjE,MAAQ,CACNhB,KAAM,gCACNV,OAAQ,WACRmB,YAAY,GAAD,mBAAMV,EAAMU,aAAZ,CAAyB,CAACT,KAAMD,EAAMC,KAAMV,OAASS,EAAMT,UACtEoB,aAAc,IAGlB,QACE,OAAOX,IC5CPsB,EAAQC,YAAYV,GAG1BW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.77b142d2.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './Sharebox.css';\n\nclass Sharebox extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let tweetContent = `https://twitter.com/intent/tweet?text=${this.props.textForShare} -${this.props.author}`;\n    return (\n      <div className=\"sharebox\"><a href={tweetContent} target=\"_blank\" id=\"tweet-quote\" rel=\"noreferrer\">Tweet Take</a></div>\n    )\n  }\n}\n\n//redux connections for sharebox\n\nconst mapStateToProps = (state) => {\n  return {\n    textForShare: state.text,\n    author: state.author\n  };\n}\n\nexport default connect(mapStateToProps)(Sharebox);","// action constants for export, not that I expect many \n\nexport const NEXT = \"NEXT\";","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Sharebox from './components/Sharebox'\nimport { connect } from 'react-redux';\nimport { nextQuote } from './redux/actions';\nimport \"@fontsource/comic-mono\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNext = this.handleNext.bind(this);\n  }\n\n  handleNext = () => {\n    this.props.nextQuote();\n  }\n\n  componentDidMount() {\n    this.handleNext();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"quote-box\" className=\"quote-box\">\n          <header>\n            <h1>Hot Takes Wellspring</h1>\n          </header>\n          <div id=\"full-quote\">\n            <div id=\"text\">{this.props.text}</div>\n            <div id=\"author\" >-{this.props.author}</div>\n          </div>\n          <div className=\"buttonbox\">\n            <Sharebox />\n            <button id=\"new-quote\" onClick={this.handleNext}>Next Take</button>\n          </div>\n        </div>\n      </div>\n\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n}\n\n//Redux connections\nconst mapStateToProps = (state) => {\n  return {\n    text: state.text,\n    author: state.author\n  };\n}\n\n//mapDispatchToProps currently unused, using literal { nextQuote } instead\n// const mapDispatchToProps = (dispatch) => {\n//   return ({\n//     nextQuote: function() {\n//       dispatch(nextQuote());\n//     }\n//   });\n// }\n\n//Sample Redux notes\n//Two-step connect\n// 1) `connect` returns a new function that accepts the component to wrap:\n// const connectToStore = connect(mapStateToProps, mapDispatchToProps);\n// 2) and that function returns the connected, wrapper component:\n// const ConnectedComponent = connectToStore(Component);\n// // One-step connect (curried)\n// connect(mapStateToProps, mapDispatchToProps)(Component);\n\nexport default connect(mapStateToProps, { nextQuote })(App);\n","import { NEXT } from './constants.js';\n\n\nexport const nextQuote = () => {\n  return {\n    type: NEXT\n  }\n}\n\n","import { NEXT } from './constants.js';\nimport jsonTakes from './takes20210118.json';\n\nlet takes = jsonTakes.takes;\n\n// function getTakes(){\n//   fetch('./takes20210118.json')\n//   .then(response => {\n//     return response.json()\n//   })\n//   // .then(data => {\n//   //   console.log(data);\n//   //   return data;})\n//   .then(data => {\n//     takes = data.takes;\n//   })\n//   .catch(error => console.log(error));\n// }\n// getTakes();\n// console.log(takes);\n\n\nconst startingState = {\n  text: '',\n  author: '',\n  usedPhrases: [],\n  freshPhrases: takes\n}\n\n// console.log(startingState);\n\nfunction rootReducer(state = startingState, action) {\n  switch (action.type) {\n    case (NEXT):\n      //check that supply of hot takes in freshPhrases is nonzero\n      if (state.freshPhrases.length) {\n        let lastPhrase = {\n          text: state.text,\n          author: state.author\n        };\n        let randomFreshIndex = Math.floor(Math.random() * state.freshPhrases.length);\n        let { text, author } = state.freshPhrases[randomFreshIndex];\n        return ({\n          text: text,\n          author: author,\n          usedPhrases: [...state.usedPhrases, lastPhrase],\n          freshPhrases: [...state.freshPhrases.slice(0, randomFreshIndex), \n                        ...state.freshPhrases.slice(randomFreshIndex + 1)]\n        });\n    } else {\n      return ({\n        text: \"Out of hot takes, try twitter\",\n        author: \"Matthieu\",\n        usedPhrases: [...state.usedPhrases, {text: state.text, author:  state.author}],\n        freshPhrases: []\n      })\n    }\n    default:\n      return state;\n\n  }\n  \n\n}\n\n\nexport default rootReducer;","//Default imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\n//Redux imports\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// import thunk from 'redux-thunk';\nimport rootReducer from './redux/reducers.js'\n\n\nconst store = createStore(rootReducer);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}